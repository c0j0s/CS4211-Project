// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;


#define HOME_TEAM 1123;
#define AWAY_TEAM 4435;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley(air-borne strike), and Header
enum {SP, LP, LS, FI, VO, HD};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
// [-1 -1 -1 -1 -1 -1   L, LR, CL, C, CR, RL, R	   -1 -1 -1 -1 -1 -1]
var atkKepPos = [-1(6), 0,  0,  0, 1, 0,  0,  0, -1(6)];

var atkDefPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)]; //A
var defForPos = [-1(6), 0,  0,  1, 0, 1,  0,  0, -1(6)]; //D

var atkMidPos = [-1(6), 0,  1,  0, 1, 0,  1,  0, -1(6)]; //A
var defMidPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)]; //D

var atkForPos = [-1(6), 0,  1,  0, 1, 0,  1,  0, -1(6)]; //A
var defDefPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)]; //D

var defKepPos = [-1(6), 0,  0,  0, 1, 0,  0,  0, -1(6)];



var ball_possession=AWAY_TEAM;

/*
atkFor -> finishing(defPos[-2, +2], average of the three defending stats) -> goal
atkMid -> shortpass(defPos[-2, +2], average of the three defending stats) -> atkFor

defDef -> tackle [] foul(aggression) -> penalty_kick(atkFor[finishing] vs defKep)
*/

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
AtkKep = [pos[C] == 1]Kep_1(64, 64, 50, C);

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
AtkDef = [pos[R ] == 1]Def(73, 71, 38, R) []
		 [pos[CR] == 1]Def(68, 63, 38, CR) [] 
		 [pos[CL] == 1]Def(68, 63, 38, CL) [] 
		 [pos[L ] == 1]Def(72, 59, 38, L);

DefFor = [pos[RL] == 1]For(77, 75, 74, 77, 75, RL) [] 
		 [pos[C ] == 1]For(75, 73, 66, 76, 75, C) [] 
		 [pos[LR] == 1]For(73, 65, 65, 69, 75, LR);

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
AtkMid = [pos[RL] == 1]Mid(79, 76, 74, 59, RL) [] 
		 [pos[C ] == 1]Mid(83, 80, 57, 59, C) [] 
		 [pos[LR] == 1]Mid(78, 73, 75, 59, LR);
		 
DefMid = [pos[RL] == 1]Mid(79, 76, 74, 59, RL) [] 
		 [pos[C ] == 1]Mid(83, 80, 57, 59, C) [] 
		 [pos[LR] == 1]Mid(78, 73, 75, 59, LR);
		 
AtkFor = [pos[RL] == 1]For(77, 75, 74, 77, 75, RL) [] 
		 [pos[C ] == 1]For(75, 73, 66, 76, 75, C) [] 
		 [pos[LR] == 1]For(73, 65, 65, 69, 75, LR);

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending:gk_handling, gk_*" via the prob. to lose the ball parameter

// the defending keeper is "Artur Boruc"
// gk_diving=82
// gk_handling=72
// gk_reflexes=83
// gk_speed=44
// gk_positioning=74
// average=71
// Note: gk_kicking only measures the goalkeeper's ability to kick the ball from
// out of the hands or on the ground

DefKep = [pos[C] == 1]Kep_2(71, C);

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

/**
	AtkKep -> [ i:short pass | j:long pass success ] -> AtkDef
	attacking_short_pass:
	skill_long_pass:
	aggregated_intercept: avg(intercept_score + 3 defending stat) by num_def_for
	 num_def_for
*/

Kep_1(attacking_short_pass, skill_long_pass, aggregated_intercept, position) = [
		atkDefPos[position-2] == 1 || 
		atkDefPos[position-1] == 1 ||
		atkDefPos[position  ] == 1 || 
		atkDefPos[position+1] == 1 || 
		atkDefPos[position+2] == 1
	]	shortPass -> pcase {
						attacking_short_pass: pass -> UpdatePos(position, SP); [ball_possession == AWAY_TEAM] AtkDef [] [ball_possession == HOME_TEAM] DefFor// position(i) of making short pass
						aggregated_intercept: intercepted{danger = 5;} -> openPos(); DefFor
					}
	[] // general choice
	[
		atkDefPos[position-6] == 1 ||
		atkDefPos[position-5] == 1 ||
		atkDefPos[position-4] == 1 ||
		atkDefPos[position-3] == 1 ||
		atkDefPos[position+3] == 1 ||
		atkDefPos[position+4] == 1 ||
		atkDefPos[position+5] == 1 ||
		atkDefPos[position+6] == 1
	]	longPass -> pcase {
						skill_long_pass: 		pass -> UpdatePos(position, LP); AtkDef // position(i) of making long pass
						aggregated_intercept: 	intercepted{danger = 5;} -> openPos(); DefFor
					};

/*
	AtkDef -> [ i:short pass | j:long pass ] -> AtkMid
	k: defending team forward's player ratings (weighted combination of the standing tackle, sliding tackle, and interception)
*/
Def(attacking_short_pass, skill_long_pass, aggregated_intercept, position) = [
		atkMidPos[position-2] == 1 ||
		atkMidPos[position-1] == 1 ||
		atkMidPos[position  ] == 1 ||
		atkMidPos[position+1] == 1 ||
		atkMidPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_pass: pass -> UpdatePos(position, SP); AtkMid
					aggregated_intercept: tackled{danger = 4;} -> openPos(); DefFor
				}
	 [] // general choice
	[
		atkMidPos[position-6] == 1 ||
		atkMidPos[position-5] == 1 ||
		atkMidPos[position-4] == 1 ||
		atkMidPos[position-3] == 1 ||
		atkMidPos[position+3] == 1 ||
		atkMidPos[position+4] == 1 ||
		atkMidPos[position+5] == 1 ||
		atkMidPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_pass: pass -> UpdatePos(position, LP); AtkMid
					aggregated_intercept: tackled{danger = 4;} -> openPos(); DefFor
				};


/**
	AtkMid -> [ i:short pass | j:long pass  | k:long shot ] -> AtkFor
	l: defending team forward's midfilder ratings 
*/
Mid(attacking_short_pass, skill_long_pass, power_long_shot,aggregated_tackled, position) = [
		atkForPos[position-2] == 1 ||
		atkForPos[position-1] == 1 ||
		atkForPos[position  ] == 1	||
		atkForPos[position+1] == 1 ||
		atkForPos[position+2] == 1
	]	shortPass -> pcase {
						attacking_short_pass: pass -> UpdatePos(position, SP); AtkFor
						aggregated_tackled: tackled{danger = 3;} -> openPos(); DefFor
					}
	 [] // general choice
	[
		 atkForPos[position-6] == 1 ||
		 atkForPos[position-5] == 1 ||
		 atkForPos[position-4] == 1 ||
		 atkForPos[position-3] == 1 ||
		 atkForPos[position+3] == 1 ||
		 atkForPos[position+4] == 1 ||
		 atkForPos[position+5] == 1 ||
		 atkForPos[position+6] == 1
	]	 longPass -> pcase {
						skill_long_pass: pass{inAir = true;} -> UpdatePos(position, LP); AtkFor
						aggregated_tackled: tackled{danger = 3;} -> Skip
					}
	 [] // general choice
	[
		 defKepPos[C] == 1
	]	longShot -> pcase {
						power_long_shot: shoot -> UpdatePos(position, LS); DefKep
						aggregated_tackled: tackled{danger = 3;} -> Skip
					};

/**
	AtkFor -> [ i:finish | j:long shot | k:volley | l:header ] -> Defkep
	m: defending team defender player ratings 
*/
For(i, j, k, l, m, position) = [
		defKepPos[C] == 1
	]	finish -> pcase {
					i: shoot -> UpdatePos(position, FI); DefKep
					m: tackled{danger = 2;} -> Skip
				}
	 [] // general choice
	 [
	 	defKepPos[C] == 1
	 ]	longShot -> pcase {
					j: shoot -> UpdatePos(position, LS); DefKep
					m: tackled{danger = 2;} -> Skip
				}
	 [] // general choice
	 [
	 	defKepPos[C] == 1 && inAir == true
	 ]	volley -> pcase {
					k: shoot -> UpdatePos(position, VO); DefKep
					m: tackled{danger = 2;} -> Skip
				}
	 [] // general choice
	 [
	 	defKepPos[C] == 1 && inAir == true
	 ]	header -> pcase {
					l: shoot -> UpdatePos(position, HD); DefKep
					m: tackled{danger = 2;} -> Skip
				};

/**
	DefKep -> [ i:attemptSave ] -> Skip
*/
Kep_2(i, position) = attemptSave -> pcase {
								i: save{danger = 1;} -> Skip
								100-i: concede -> Skip
							};


// we calculate the probability of a penalty kick happening using 0.25 * mentality_aggression of defender
// unfortunately, PAT3 doesn't like dot notation (i.e., `0.25`) so we'll have to use divide instead (i.e., `1/4`)
// lowest mentality_aggression in epl_ratings_20152016 = 9
// highest mentality_aggression in epl_ratings_20152016 = 94
CheckIfPenaltyKick(mentality_aggression) = attacker_clash_with_defender -> pcase {
	((1/4) * mentality_aggression): penalty_kick -> SimulatePenaltyKick(1,2,3,4,5,6,7/* dummy parameters */)
	100 - ((1/4) * mentality_aggression): no_penalty_kick -> Kep_2(1,2/* dummy parameters*/)
};

// there is `gk_speed` but no `goalkeeping_speed`
// => use the `gk_*` stats instead of the `goalkeeping_*` stats 
SimulatePenaltyKick(
	atk_mentality_penalties,
	atk_skill_fk_accuracy,
	gk_diving,
	gk_handling,
	gk_reflexes,
	gk_speed,
	gk_positioning
) = penalty_kick -> pcase {
		// average atk stat
		(atk_mentality_penalties + atk_skill_fk_accuracy) / 2: goal -> Skip
		// average gk stat
		(gk_diving + gk_handling + gk_reflexes + gk_speed + gk_positioning) / 5: saved{danger = 1;} -> Skip
	};

/*
	params: current position, action
	return: update the position eligible to receive the ball
*/
openPos() = setAllToOne {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip;

UpdatePos(position, e) = case {
	position == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	position == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

// danger level: dist of ball to AtkKep
#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;

// G: Globally. has to hold on the entire subsequent path.
// F: Finally. eventually has to hold (somewhere on the subsequent path》
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;