// Please use the `epl_ratings_20152016.csv dataset` for consistency

// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// PAT verification should finish in about 30 seconds
#define MAX_STEP 20;

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// number of "steps" that the model has taken
var step = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley(air-borne strike), and Header
enum {SP, LP, LS, FI, VO, HD};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
// [-1 -1 -1 -1 -1 -1    L, LR, CL, C, CR, RL, R    -1 -1 -1 -1 -1 -1]
var awayForPos = [-1(6), 0,  0,  1, 0, 1,  0,  0, -1(6)];
var awayMidPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)];
var awayDefPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)];
var awayKepPos = [-1(6), 0,  0,  0, 1, 0,  0,  0, -1(6)];

var homeForPos = [-1(6), 0,  1,  0, 1, 0,  1,  0, -1(6)];
var homeMidPos = [-1(6), 0,  1,  0, 1, 0,  1,  0, -1(6)];
var homeDefPos = [-1(6), 1,  0,  1, 0, 1,  0,  1, -1(6)];
var homeKepPos = [-1(6), 0,  0,  0, 1, 0,  0,  0, -1(6)];

// Note: "left" and "right" can be ambiguous
// assuming "left" and "right" are with reference to the goal keeper of each side

var away_team_score = 0;
var home_team_score = 0;

/*
awayFor -> finishing(homePos[-2, +2], average of the three defending stats) -> goal
awayMid -> shortpass(homePos[-2, +2], average of the three defending stats) -> awayFor

homeDef -> tackle [] foul(aggression) -> penalty_kick(awayFor[finishing] vs homeKep)
*/

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player
// The guard only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player

// ============================================================================

StartGame = coin_toss -> pcase {
	1: away_team_starts -> openPos(); AwayMid
	1: home_team_starts -> openPos(); HomeMid
};

// ============================================================================
// away keeper C is "Bradley Guzan"
// attacking_short_passing=26
// skill_long_passing=34

// home forward CL is "Callum Wilson" (https://sofifa.com/player/196978/callum-wilson/160002)
// mentality_interceptions=40
// defending_marking=20
// defending_standing_tackle=39
// defending_sliding_tackle=25

// home forward CR is "Joshua King"
// mentality_interceptions=36
// defending_marking=22
// defending_standing_tackle=27
// defending_sliding_tackle=19

// multiplier bonus when there are more defenders
// 1 person = 100%
// 2 person = 110%
// 3 person = 120%
// 4 person = 130%
// ...

// ((40+20+39+25 + 36+22+27+19) / 2 / 4) * 1.1 = 31.35
// aggregated_defending = 31.35 = 31
AwayKepAtk = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C] == 1]AwayKepPass(25, 34, 35, C);

// away keeper C is "Bradley Guzan"
// gk_diving=80
// gk_handling=76
// gk_reflexes=81
// gk_speed=48
// gk_positioning=77
// (80+76+81+48+77) / 5 = 72.4
// aggregated_gk = 72.4 = 72
AwayKepDef = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C] == 1]AwayKepSave(71, C);

// Here for the defender, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively
// The prob. to lose the ball for the attacking team's defender was calculated based on the defending team forward's player ratings
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards

// ============================================================================

// away defender R is "Leandro Bacuna"
// attacking_short_passing=73
// skill_long_passing=71

// away defender CR is "Micah Richards"
// attacking_short_passing=68
// skill_long_passing=63

// away defender CL is "Ciaran Clark"
// attacking_short_passing=68
// skill_long_passing=63

// away defender L is "Jordan Amavi"
// attacking_short_passing=72
// skill_long_passing=59

// ============================================================================

// home midfielder CR is "Dan Gosling"
// mentality_interceptions=70
// defending_marking=66
// defending_standing_tackle=68
// defending_sliding_tackle=68

// home midfielder CL is "Andrew Surman"
// mentality_interceptions=60
// defending_marking=62
// defending_standing_tackle=68
// defending_sliding_tackle=62

// home midfielder L is "Marc Pugh"
// mentality_interceptions=37
// defending_marking=30
// defending_standing_tackle=44
// defending_sliding_tackle=31

// home midfielder R is "Matt Ritchie"
// mentality_interceptions=46
// defending_marking=56
// defending_standing_tackle=57
// defending_sliding_tackle=53

// ((70+66+68+68 + 60+62+68+62 + 37+30+44+31 + 46+56+57+53) / 4 / 4) * 1.3 = 71.3375
// aggregated_defending = 71.3375 = 71
AwayDef = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[R ] == 1]AwayDefPass(70, 64, 85, R) []
          [step <  MAX_STEP && pos[CR] == 1]AwayDefPass(65, 50, 85, CR) []
          [step <  MAX_STEP && pos[CL] == 1]AwayDefPass(68, 60, 85, CL) []
          [step <  MAX_STEP && pos[L ] == 1]AwayDefPass(68, 64, 85, L);

// Similar to defender, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defender

// ============================================================================

// away midfielder RL is "Jordan Veretout"
// attacking_short_passing=79
// skill_long_passing=76
// power_long_shots=74

// away midfielder C is "Ashley Westwood"
// attacking_short_passing=83
// skill_long_passing=80
// power_long_shots=57

// away midfielder RL is "Idrissa Gana Gueye"
// attacking_short_passing=78
// skill_long_passing=73
// power_long_shots=75

// use the same aggregated_defending stat = 71
AwayMid = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[R ] == 1]AwayMidPass(69, 66, 74, 85, R) []
		  [step <  MAX_STEP && pos[CR] == 1]AwayMidPass(73, 71, 73, 85, CR) []
		  [step <  MAX_STEP && pos[CL] == 1]AwayMidPass(82, 76, 65, 85, CL) []
		  [step <  MAX_STEP && pos[L ] == 1]AwayMidPass(68, 59, 66, 85, L);

// home defender R is "Simon Francis"
// mentality_interceptions=68
// defending_marking=73
// defending_standing_tackle=77
// defending_sliding_tackle=70
// :: mentality_aggression=73

// home defender CR is "Tommy Elphick"
// mentality_interceptions=61
// defending_marking=76
// defending_standing_tackle=74
// defending_sliding_tackle=70
// :: mentality_aggression=77

// home defender CL is "Steve Cook"
// mentality_interceptions=68
// defending_marking=71
// defending_standing_tackle=76
// defending_sliding_tackle=71
// :: mentality_aggression=74

// home defender L is "Charlie Daniels"
// mentality_interceptions=65
// defending_marking=71
// defending_standing_tackle=73
// defending_sliding_tackle=72
// :: mentality_aggression=51

// ((68+73+77+70 + 61+76+74+70 + 68+71+76+71 + 65+71+73+72) / 4 / 4) * 1.3 = 92.3
// aggregated_defending = 92.3 = 92

// :: (73+77+74+51) / 4 = 68.75
// :: aggregated_aggression = 68.75 * (1/4) = 17.1875 = 18 <-- stefan: calculation error :: this should have been 17 

// ============================================================================

// home keeper C is "Artur Boruc"
// gk_diving=82
// gk_handling=72
// gk_reflexes=83
// gk_speed=44
// gk_positioning=74
// (82+72+83+44+74) / 5 = 71
// aggregated_gk = 71

// away forward RL is "Jordan Ayew"
// attacking_finishing=77
// power_long_shots=75
// attacking_volleys=74
// attacking_heading_accuracy=77
// :: mentality_penalties=74
// :: skill_fk_accuracy=71
// :: (74+71) / 2 = 72.5
// :: => aggregated_penalty_kick = 72.5 = 73

// away forward C is "Gabriel Imuetinyan Agbonlahor"
// attacking_finishing=75
// power_long_shots=73
// attacking_volleys=66
// attacking_heading_accuracy=76
// :: mentality_penalties=66
// :: skill_fk_accuracy=46
// :: (66+46) / 2 = 56
// :: => aggregated_penalty_kick = 56

// away forward LR is "Scott Sinclair"
// attacking_finishing=73
// power_long_shots=65
// attacking_volleys=65
// attacking_heading_accuracy=69
// :: mentality_penalties=83
// :: skill_fk_accuracy=75
// :: (83+75) / 2 = 79
// :: => aggregated_penalty_kick = 79

//					                                     attacking_finishing
//					                                     |   power_long_shots
//					                                     |   |   attacking_volley
//					                                     |   |   |   attacking_heading_accuracy
//					                                     |   |   |   |   aggregated_defending
//					                                     |   |   |   |   |   aggregated_aggression
//					                                     |   |   |   |   |   |   aggregated_penalty_kick
//					                                     |   |   |   |   |   |   |   aggregated_gk
//					                                     |   |   |   |   |   |   |   |
AwayFor = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[CR] == 1]AwayForPass(65, 58, 67, 53, 75, 19, 52, 72, CR) []
		  [step <  MAX_STEP && pos[CL] == 1]AwayForPass(79, 64, 65, 62, 75, 19, 60, 72, CL);



///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defender, midfielders and forwards are already implicitly "defending:gk_handling, gk_*" via the prob. to lose the ball parameter

// ============================================================================

// home keeper C is "Artur Boruc"
// attacking_short_passing=25
// skill_long_passing=34

// away forward RL is "Jordan Ayew"
// mentality_interceptions=33
// defending_marking=23
// defending_standing_tackle=22
// defending_sliding_tackle=25

// away forward C is "Gabriel Agbonlahor"
// mentality_interceptions=20
// defending_marking=48
// defending_standing_tackle=32
// defending_sliding_tackle=20

// away forward LR is "Scott Sinclair"
// mentality_interceptions=45
// defending_marking=19
// defending_standing_tackle=30
// defending_sliding_tackle=28

// ((33+23+22+25 + 20+48+32+20 + 45+19+30+28) / 3 / 4) * 1.2 = 34.5
// aggregated_defending = 34.5 = 35
HomeKepAtk = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C] == 1]HomeKepPass(26, 34, 31, C);

// home keeper C is "Artur Boruc"
// gk_diving=82
// gk_handling=72
// gk_reflexes=83
// gk_speed=44
// gk_positioning=74
// (82+72+83+44+74) / 5 = 71
// Note: gk_kicking only measures the goalkeeper's ability to kick the ball from
// out of the hands or on the ground
HomeKepDef = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C] == 1]HomeKepSave(72, C);

// home defender R is "Simon Francis"
// attacking_short_passing=70
// skill_long_passing=64

// home defender CR is "Tommy Elphick"
// attacking_short_passing=65
// skill_long_passing=50

// home defender CL is "Steve Cook"
// attacking_short_passing=68
// skill_long_passing=60

// home defender L is "Charlie Daniels"
// attacking_short_passing=68
// skill_long_passing=64

// ============================================================================

// away midfielder RL is "Jordan Veretout"
// mentality_interceptions=70
// defending_marking=63
// defending_standing_tackle=74
// defending_sliding_tackle=63

// away midfielder C is "Ashley Westwood"
// mentality_interceptions=71
// defending_marking=63
// defending_standing_tackle=67
// defending_sliding_tackle=64

// away midfielder RL is "Idrissa Gana Gueye"
// mentality_interceptions=83
// defending_marking=76
// defending_standing_tackle=79
// defending_sliding_tackle=74

// ((70+63+74+63 + 71+63+67+64 + 83+76+79+74) / 3 / 4) * 1.2 = 84.69999
// aggregated_defending = 84.69999 = 85
HomeDef = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[R ] == 1]HomeDefPass(73, 71, 71, R) []
          [step <  MAX_STEP && pos[CR] == 1]HomeDefPass(68, 63, 71, CR) []
          [step <  MAX_STEP && pos[CL] == 1]HomeDefPass(68, 63, 71, CL) []
          [step <  MAX_STEP && pos[L ] == 1]HomeDefPass(72, 59, 71, L);

// home midfielder R is "Matt Ritchie"
// attacking_short_passing=69
// skill_long_passing=66
// power_long_shots=74

// home midfielder CR is "Dan Gosling"
// attacking_short_passing=73
// skill_long_passing=71
// power_long_shots=73

// home midfielder CL is "Andrew Surman"
// attacking_short_passing=82
// skill_long_passing=76
// power_long_shots=65

// home midfielder L is "Marc Pugh"
// attacking_short_passing=68
// skill_long_passing=59
// power_long_shots=66

// use the same aggregated_defending stat = 85
HomeMid = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[RL] == 1]HomeMidPass(79, 76, 74, 71, RL) []
          [step <  MAX_STEP && pos[C ] == 1]HomeMidPass(83, 80, 57, 71, C) []
          [step <  MAX_STEP && pos[LR] == 1]HomeMidPass(78, 73, 75, 71, LR);

// away keeper C is "Bradley Guzan"
// gk_diving=80
// gk_handling=76
// gk_reflexes=81
// gk_speed=48
// gk_positioning=77
// (80+76+81+48+77) / 5 = 72.4
// aggregated_gk = 72.4 = 72

// away defender is "Leandro Bacuna"
// mentality_interceptions=63
// defending_marking=72
// defending_standing_tackle=70
// defending_sliding_tackle=70
// :: mentality_aggression=72

// away defender is "Micah Richards"
// mentality_interceptions=75
// defending_marking=77
// defending_standing_tackle=78
// defending_sliding_tackle=80
// :: mentality_aggression=85

// away defender is "Ciaran Clark"
// mentality_interceptions=79
// defending_marking=77
// defending_standing_tackle=81
// defending_sliding_tackle=81
// :: mentality_aggression=82

// away defender is "Jordan Amavi"
// mentality_interceptions=75
// defending_marking=75
// defending_standing_tackle=73
// defending_sliding_tackle=77
// :: mentality_aggression=66

// ((63+72+70+70 + 75+77+78+80 + 79+77+81+81 + 75+75+73+77) / 4 / 4) = 75.1875
// aggregated_defending = 75.1875 = 75

// :: (72+85+82+66) / 4 = 76.25
// :: aggregated_aggression = 76.25 * (1/4) = 19.0625 = 19

// ============================================================================

// home forward CR is "Joshua King"
// attacking_finishing=65
// power_long_shots=58
// attacking_volleys=67
// attacking_heading_accuracy=53
// :: mentality_penalties=62
// :: skill_fk_accuracy=42
// :: (62+42) / 2 = 52
// :: => aggregated_penalty_kick = 52

// home forward CL is "Callum Wilson" (https://sofifa.com/player/196978/callum-wilson/160002)
// attacking_finishing=79
// power_long_shots=64
// attacking_volleys=65
// attacking_heading_accuracy=62
// :: mentality_penalties=75
// :: skill_fk_accuracy=45
// :: (75+45) / 2 = 60
// :: => aggregated_penalty_kick = 60

//                                   					attacking_finishing
//                                   					|   power_long_shots
//                                   					|   |   attacking_volley
//                                   					|   |   |   attacking_heading_accuracy
//                                   					|   |   |   |   aggregated_defending
//                                   					|   |   |   |   |   aggregated_aggression
//                                   					|   |   |   |   |   |   aggregated_penalty_kick
//          					     					|   |   |   |   |   |   |   aggregated_gk
//                                   					|   |   |   |   |   |   |   |
HomeFor = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[RL] == 1]HomeForPass(77, 75, 74, 77, 92, 17, 73, 71, RL) []
          [step <  MAX_STEP && pos[C ] == 1]HomeForPass(75, 73, 66, 76, 92, 17, 56, 71, C) []
          [step <  MAX_STEP && pos[LR] == 1]HomeForPass(73, 65, 65, 69, 92, 17, 79, 71, LR);


///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

/**
 * AwayKep -> AwayKepPass -> AwayDef/HomeFor
 */
AwayKepPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		awayDefPos[position-2] == 1 ||
		awayDefPos[position-1] == 1 ||
		awayDefPos[position  ] == 1 ||
		awayDefPos[position+1] == 1 ||
		awayDefPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayDef
					aggregated_defending: intercepted -> openPos(); HomeFor
				}
	[] // general choice
	[
		awayDefPos[position-6] == 1 ||
		awayDefPos[position-5] == 1 ||
		awayDefPos[position-4] == 1 ||
		awayDefPos[position-3] == 1 ||
		awayDefPos[position+3] == 1 ||
		awayDefPos[position+4] == 1 ||
		awayDefPos[position+5] == 1 ||
		awayDefPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); AwayDef
					aggregated_defending: intercepted -> openPos(); HomeFor
				};

/**
 * HomeKep -> HomeKepPass -> HomeDef/HomeFor
 */
HomeKepPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		homeDefPos[position-2] == 1 ||
		homeDefPos[position-1] == 1 ||
		homeDefPos[position  ] == 1 ||
		homeDefPos[position+1] == 1 ||
		homeDefPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeDef
					aggregated_defending: intercepted -> openPos(); AwayFor
				}
	[] // general choice
	[
		homeDefPos[position-6] == 1 ||
		homeDefPos[position-5] == 1 ||
		homeDefPos[position-4] == 1 ||
		homeDefPos[position-3] == 1 ||
		homeDefPos[position+3] == 1 ||
		homeDefPos[position+4] == 1 ||
		homeDefPos[position+5] == 1 ||
		homeDefPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); HomeDef
					aggregated_defending: intercepted -> openPos(); AwayFor
				};

/**
 * AwayDef -> AwayDefPass -> AwayMid/HomeMid
 */
AwayDefPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		awayMidPos[position-2] == 1 ||
		awayMidPos[position-1] == 1 ||
		awayMidPos[position  ] == 1 ||
		awayMidPos[position+1] == 1 ||
		awayMidPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayMid
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[] // general choice
	[
		awayMidPos[position-6] == 1 ||
		awayMidPos[position-5] == 1 ||
		awayMidPos[position-4] == 1 ||
		awayMidPos[position-3] == 1 ||
		awayMidPos[position+3] == 1 ||
		awayMidPos[position+4] == 1 ||
		awayMidPos[position+5] == 1 ||
		awayMidPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); AwayMid
					aggregated_defending: tackled -> openPos(); HomeMid
				};

HomeDefPass(
	attacking_short_passing, 
	skill_long_passing, 
	aggregated_defending, 
	position
) = [
		homeMidPos[position-2] == 1 ||
		homeMidPos[position-1] == 1 ||
		homeMidPos[position  ] == 1 ||
		homeMidPos[position+1] == 1 ||
		homeMidPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeMid
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[] // general choice
	[
		homeMidPos[position-6] == 1 ||
		homeMidPos[position-5] == 1 ||
		homeMidPos[position-4] == 1 ||
		homeMidPos[position-3] == 1 ||
		homeMidPos[position+3] == 1 ||
		homeMidPos[position+4] == 1 ||
		homeMidPos[position+5] == 1 ||
		homeMidPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); HomeMid
					aggregated_defending: tackled -> openPos(); AwayMid
				};

/**
 * AwayMid -> AwayFor
 */
AwayMidPass(
	attacking_short_passing,
	skill_long_passing,
	power_long_shots,
	aggregated_defending,
	position
) = [
		awayForPos[position-2] == 1 ||
		awayForPos[position-1] == 1 ||
		awayForPos[position  ] == 1	||
		awayForPos[position+1] == 1 ||
		awayForPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayFor
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[] // general choice
	[
		awayForPos[position-6] == 1 ||
		awayForPos[position-5] == 1 ||
		awayForPos[position-4] == 1 ||
		awayForPos[position-3] == 1 ||
		awayForPos[position+3] == 1 ||
		awayForPos[position+4] == 1 ||
		awayForPos[position+5] == 1 ||
		awayForPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass{inAir = true;} -> UpdatePos(position, LP); AwayFor
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[] // general choice
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeMid
				};

HomeMidPass(
	attacking_short_passing,
	skill_long_passing,
	power_long_shots,
	aggregated_defending,
	position
) = [
		homeForPos[position-2] == 1 ||
		homeForPos[position-1] == 1 ||
		homeForPos[position  ] == 1	||
		homeForPos[position+1] == 1 ||
		homeForPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeFor
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[] // general choice
	[
		homeForPos[position-6] == 1 ||
		homeForPos[position-5] == 1 ||
		homeForPos[position-4] == 1 ||
		homeForPos[position-3] == 1 ||
		homeForPos[position+3] == 1 ||
		homeForPos[position+4] == 1 ||
		homeForPos[position+5] == 1 ||
		homeForPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass{inAir = true;} -> UpdatePos(position, LP); HomeFor
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[] // general choice
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayMid
				};

/**
 * AwayFor -> HomeKep
 */
AwayForPass(
	attacking_finishing,
	power_long_shots,
	attacking_volleys,
	attacking_heading_accuracy,
	aggregated_defending,
	aggregated_aggression,

	aggregated_penalty_kick,
	aggregated_gk,

	position
) = [
		homeKepPos[C] == 1
	]	finish -> pcase {
					attacking_finishing: shoot -> UpdatePos(position, FI); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		homeKepPos[C] == 1 && inAir == true
	]	volley -> pcase {
					attacking_volleys: shoot -> UpdatePos(position, VO); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		homeKepPos[C] == 1 && inAir == true
	]	header -> pcase {
					attacking_heading_accuracy: shoot -> UpdatePos(position, HD); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				};

HomeForPass(
	attacking_finishing,
	power_long_shots,
	attacking_volleys,
	attacking_heading_accuracy,
	aggregated_defending,
	aggregated_aggression,

	aggregated_penalty_kick,
	aggregated_gk,

	position
)	= [
		awayKepPos[C] == 1
	]	finish -> pcase {
					attacking_finishing: shoot -> UpdatePos(position, FI); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		awayKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		awayKepPos[C] == 1 && inAir == true
	]	volley -> pcase {
					attacking_volleys: shoot -> UpdatePos(position, VO); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[] // general choice
	[
		awayKepPos[C] == 1 && inAir == true
	]	header -> pcase {
					attacking_heading_accuracy: shoot -> UpdatePos(position, HD); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				};

/**
 * AwayKep -> Skip
 * End game after goal
 */
AwayKepSave(aggregated_gk, position) = attemptSave -> pcase {
								aggregated_gk: save -> UpdatePos(99, 99); AwayKepAtk
								100 - aggregated_gk: concede{ home_team_score++ } -> openPos(); AwayMid // start new game with away team
							};

HomeKepSave(aggregated_gk, position) = attemptSave -> pcase {
								aggregated_gk: save -> UpdatePos(99, 99); HomeKepAtk
								100 - aggregated_gk: concede{ away_team_score++ } -> openPos(); HomeMid // start new game with home team
							};


// we calculate the probability of a penalty kick happening using 0.25 * mentality_aggression of defender
// unfortunately, PAT3 doesn't like dot notation (i.e., `0.25`) so we'll have to use divide instead (i.e., `1/4`)
// lowest mentality_aggression in epl_ratings_20152016 = 9
// highest mentality_aggression in epl_ratings_20152016 = 94
//CheckIfPenaltyKick(mentality_aggression) = attacker_clash_with_defender -> pcase {
//	((1/4) * mentality_aggression): penalty_kick -> SimulatePenaltyKick(1,2,3,4,5,6,7/* dummy parameters */)
//	100 - ((1/4) * mentality_aggression): no_penalty_kick -> AwayKepSave(1,2/* dummy parameters*/)
//};

// there is `gk_speed` but no `goalkeeping_speed`
// => use the `gk_*` stats instead of the `goalkeeping_*` stats
AwaySimulatePenaltyKick(
	aggregated_penalty_kick,
	aggregated_gk
) = penalty_kick -> pcase {
		aggregated_penalty_kick: goal{ away_team_score++; } -> openPos(); HomeKepAtk
		aggregated_gk: saved -> UpdatePos(99, 99); AwayKepAtk // continue game
	};

HomeSimulatePenaltyKick(
	aggregated_penalty_kick,
	aggregated_gk
) = penalty_kick -> pcase {
		aggregated_penalty_kick: goal{ home_team_score++; } -> openPos(); AwayKepAtk
		aggregated_gk: saved ->  UpdatePos(99, 99); HomeKepAtk // continue game
	};

openPos() = incStep{step++} -> setAllToOne {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip;

/**
 * params: current position, action
 * return: update the position eligible to receive the ball
 */
UpdatePos(position, e) = incStep{step++} -> case {
	position == L:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CL:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

// danger level: dist of ball to AwayKepPass
// #define Goal0 danger <= 0;
// #define Goal1 danger <= 1;
// #define Goal2 danger <= 2;
// #define Goal3 danger <= 3;
// #define Goal4 danger <= 4;
#define away_team_wins away_team_score > home_team_score && step < MAX_STEP;
#define home_team_wins away_team_score < home_team_score && step < MAX_STEP;
#define game_ends_in_draw away_team_score == home_team_score && step < MAX_STEP;

#assert StartGame deadlockfree;
#assert StartGame reaches away_team_wins with prob;
#assert StartGame reaches home_team_wins with prob;
#assert StartGame |= F G game_ends_in_draw with prob;

// G == Globally: has to hold on the entire subsequent path
// F == Finally: eventually has to hold (somewhere on the subsequent path)
// #assert AwayKepAtk |= F G Goal0 with prob;
// #assert AwayKepAtk |= F G Goal1 with prob;
// #assert AwayKepAtk |= F G Goal2 with prob;
// #assert AwayKepAtk |= F G Goal3 with prob;
// #assert AwayKepAtk |= F G Goal4 with prob;
