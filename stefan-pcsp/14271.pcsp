#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

#define MAX_STEP 20;

var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

var inAir = false;

var step = 0;
enum {SP, LP, LS, FI, VO, HD};

var awayForPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var awayMidPos = [-1(6), 1, 1, 1, 0, 1, 1, 1, -1(6)];
var awayDefPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var awayKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

var homeForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var homeMidPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var homeDefPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var homeKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

var away_team_score = 0;
var home_team_score = 0;

StartGame = coin_toss -> pcase {
	1: away_team_starts -> openPos(); AwayMid
	1: home_team_starts -> openPos(); HomeMid
};

AwayKepAtk = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C ] == 1]AwayKepPass(39, 33, 51, C);

AwayKepDef = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C ] == 1]AwayKepSave(71, C);

AwayDef = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[LR] == 1]AwayDefPass(63, 55, 84, LR) []
          [step <  MAX_STEP && pos[C ] == 1]AwayDefPass(61, 58, 84, C) []
          [step <  MAX_STEP && pos[RL] == 1]AwayDefPass(60, 50, 84, RL);

AwayMid = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[L ] == 1]AwayMidPass(68, 66, 60, 84, L) []
          [step <  MAX_STEP && pos[LR] == 1]AwayMidPass(77, 76, 62, 84, LR) []
          [step <  MAX_STEP && pos[CL] == 1]AwayMidPass(75, 72, 77, 84, CL) []
          [step <  MAX_STEP && pos[CR] == 1]AwayMidPass(76, 74, 79, 84, CR) []
          [step <  MAX_STEP && pos[RL] == 1]AwayMidPass(82, 81, 80, 84, RL) []
          [step <  MAX_STEP && pos[R ] == 1]AwayMidPass(75, 73, 67, 84, R);

AwayFor = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[C ] == 1]AwayForPass(84, 81, 81, 68, 93, 19, 68, 69, C);

HomeKepAtk = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C ] == 1]HomeKepPass(12, 13, 18, C);

HomeKepDef = [step >= MAX_STEP]game_ends -> Skip []
             [step <  MAX_STEP && pos[C ] == 1]HomeKepSave(69, C);

HomeDef = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[LR] == 1]HomeDefPass(51, 60, 94, LR) []
          [step <  MAX_STEP && pos[C ] == 1]HomeDefPass(69, 65, 94, C) []
          [step <  MAX_STEP && pos[RL] == 1]HomeDefPass(61, 60, 94, RL);

HomeMid = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[L ] == 1]HomeMidPass(73, 74, 64, 94, L) []
          [step <  MAX_STEP && pos[CL] == 1]HomeMidPass(84, 82, 80, 94, CL) []
          [step <  MAX_STEP && pos[CR] == 1]HomeMidPass(75, 71, 75, 94, CR) []
          [step <  MAX_STEP && pos[R ] == 1]HomeMidPass(71, 70, 63, 94, R);

HomeFor = [step >= MAX_STEP]game_ends -> Skip []
          [step <  MAX_STEP && pos[LR] == 1]HomeForPass(56, 61, 51, 60, 86, 18, 69, 71, LR) []
          [step <  MAX_STEP && pos[C ] == 1]HomeForPass(79, 76, 74, 81, 86, 18, 72, 71, C) []
          [step <  MAX_STEP && pos[RL] == 1]HomeForPass(74, 60, 51, 43, 86, 18, 58, 71, RL);

AwayKepPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		awayDefPos[position-2] == 1 ||
		awayDefPos[position-1] == 1 ||
		awayDefPos[position  ] == 1 ||
		awayDefPos[position+1] == 1 ||
		awayDefPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayDef
					aggregated_defending: intercepted -> openPos(); HomeFor
				}
	[]
	[
		awayDefPos[position-6] == 1 ||
		awayDefPos[position-5] == 1 ||
		awayDefPos[position-4] == 1 ||
		awayDefPos[position-3] == 1 ||
		awayDefPos[position+3] == 1 ||
		awayDefPos[position+4] == 1 ||
		awayDefPos[position+5] == 1 ||
		awayDefPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); AwayDef
					aggregated_defending: intercepted -> openPos(); HomeFor
				};

HomeKepPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		homeDefPos[position-2] == 1 ||
		homeDefPos[position-1] == 1 ||
		homeDefPos[position  ] == 1 ||
		homeDefPos[position+1] == 1 ||
		homeDefPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeDef
					aggregated_defending: intercepted -> openPos(); AwayFor
				}
	[]
	[
		homeDefPos[position-6] == 1 ||
		homeDefPos[position-5] == 1 ||
		homeDefPos[position-4] == 1 ||
		homeDefPos[position-3] == 1 ||
		homeDefPos[position+3] == 1 ||
		homeDefPos[position+4] == 1 ||
		homeDefPos[position+5] == 1 ||
		homeDefPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); HomeDef
					aggregated_defending: intercepted -> openPos(); AwayFor
				};

AwayDefPass(
	attacking_short_passing,
	skill_long_passing,
	aggregated_defending,
	position
) = [
		awayMidPos[position-2] == 1 ||
		awayMidPos[position-1] == 1 ||
		awayMidPos[position  ] == 1 ||
		awayMidPos[position+1] == 1 ||
		awayMidPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayMid
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[]
	[
		awayMidPos[position-6] == 1 ||
		awayMidPos[position-5] == 1 ||
		awayMidPos[position-4] == 1 ||
		awayMidPos[position-3] == 1 ||
		awayMidPos[position+3] == 1 ||
		awayMidPos[position+4] == 1 ||
		awayMidPos[position+5] == 1 ||
		awayMidPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); AwayMid
					aggregated_defending: tackled -> openPos(); HomeMid
				};

HomeDefPass(
	attacking_short_passing, 
	skill_long_passing, 
	aggregated_defending, 
	position
) = [
		homeMidPos[position-2] == 1 ||
		homeMidPos[position-1] == 1 ||
		homeMidPos[position  ] == 1 ||
		homeMidPos[position+1] == 1 ||
		homeMidPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeMid
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[]
	[
		homeMidPos[position-6] == 1 ||
		homeMidPos[position-5] == 1 ||
		homeMidPos[position-4] == 1 ||
		homeMidPos[position-3] == 1 ||
		homeMidPos[position+3] == 1 ||
		homeMidPos[position+4] == 1 ||
		homeMidPos[position+5] == 1 ||
		homeMidPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass -> UpdatePos(position, LP); HomeMid
					aggregated_defending: tackled -> openPos(); AwayMid
				};

AwayMidPass(
	attacking_short_passing,
	skill_long_passing,
	power_long_shots,
	aggregated_defending,
	position
) = [
		awayForPos[position-2] == 1 ||
		awayForPos[position-1] == 1 ||
		awayForPos[position  ] == 1	||
		awayForPos[position+1] == 1 ||
		awayForPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); AwayFor
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[]
	[
		awayForPos[position-6] == 1 ||
		awayForPos[position-5] == 1 ||
		awayForPos[position-4] == 1 ||
		awayForPos[position-3] == 1 ||
		awayForPos[position+3] == 1 ||
		awayForPos[position+4] == 1 ||
		awayForPos[position+5] == 1 ||
		awayForPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass{inAir = true;} -> UpdatePos(position, LP); AwayFor
					aggregated_defending: tackled -> openPos(); HomeMid
				}
	[]
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeMid
				};

HomeMidPass(
	attacking_short_passing,
	skill_long_passing,
	power_long_shots,
	aggregated_defending,
	position
) = [
		homeForPos[position-2] == 1 ||
		homeForPos[position-1] == 1 ||
		homeForPos[position  ] == 1	||
		homeForPos[position+1] == 1 ||
		homeForPos[position+2] == 1
	]	shortPass -> pcase {
					attacking_short_passing: pass -> UpdatePos(position, SP); HomeFor
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[]
	[
		homeForPos[position-6] == 1 ||
		homeForPos[position-5] == 1 ||
		homeForPos[position-4] == 1 ||
		homeForPos[position-3] == 1 ||
		homeForPos[position+3] == 1 ||
		homeForPos[position+4] == 1 ||
		homeForPos[position+5] == 1 ||
		homeForPos[position+6] == 1
	]	longPass -> pcase {
					skill_long_passing: pass{inAir = true;} -> UpdatePos(position, LP); HomeFor
					aggregated_defending: tackled -> openPos(); AwayMid
				}
	[]
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayMid
				};

AwayForPass(
	attacking_finishing,
	power_long_shots,
	attacking_volleys,
	attacking_heading_accuracy,
	aggregated_defending,
	aggregated_aggression,

	aggregated_penalty_kick,
	aggregated_gk,

	position
) = [
		homeKepPos[C] == 1
	]	finish -> pcase {
					attacking_finishing: shoot -> UpdatePos(position, FI); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		homeKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		homeKepPos[C] == 1 && inAir == true
	]	volley -> pcase {
					attacking_volleys: shoot -> UpdatePos(position, VO); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		homeKepPos[C] == 1 && inAir == true
	]	header -> pcase {
					attacking_heading_accuracy: shoot -> UpdatePos(position, HD); HomeKepDef
					aggregated_defending: tackled -> openPos(); HomeDef
					aggregated_aggression: penalty -> AwaySimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				};

HomeForPass(
	attacking_finishing,
	power_long_shots,
	attacking_volleys,
	attacking_heading_accuracy,
	aggregated_defending,
	aggregated_aggression,

	aggregated_penalty_kick,
	aggregated_gk,

	position
)	= [
		awayKepPos[C] == 1
	]	finish -> pcase {
					attacking_finishing: shoot -> UpdatePos(position, FI); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		awayKepPos[C] == 1
	]	longShot -> pcase {
					power_long_shots: shoot -> UpdatePos(position, LS); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		awayKepPos[C] == 1 && inAir == true
	]	volley -> pcase {
					attacking_volleys: shoot -> UpdatePos(position, VO); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				}
	[]
	[
		awayKepPos[C] == 1 && inAir == true
	]	header -> pcase {
					attacking_heading_accuracy: shoot -> UpdatePos(position, HD); AwayKepDef
					aggregated_defending: tackled -> openPos(); AwayDef
					aggregated_aggression: penalty -> HomeSimulatePenaltyKick(aggregated_penalty_kick, aggregated_gk)
				};

AwayKepSave(aggregated_gk, position) = attemptSave -> pcase {
								aggregated_gk: save -> UpdatePos(99, 99); AwayKepAtk
								100 - aggregated_gk: concede{ home_team_score++ } -> openPos(); AwayMid // start new game with away team
							};

HomeKepSave(aggregated_gk, position) = attemptSave -> pcase {
								aggregated_gk: save -> UpdatePos(99, 99); HomeKepAtk
								100 - aggregated_gk: concede{ away_team_score++ } -> openPos(); HomeMid // start new game with home team
							};

AwaySimulatePenaltyKick(
	aggregated_penalty_kick,
	aggregated_gk
) = penalty_kick -> pcase {
		aggregated_penalty_kick: goal{ away_team_score++; } -> openPos(); HomeMid
		aggregated_gk: saved -> UpdatePos(99, 99); HomeKepAtk // continue game
	};

HomeSimulatePenaltyKick(
	aggregated_penalty_kick,
	aggregated_gk
) = penalty_kick -> pcase {
		aggregated_penalty_kick: goal{ home_team_score++; } -> openPos(); AwayMid
		aggregated_gk: saved ->  UpdatePos(99, 99); AwayKepAtk // continue game
	};

openPos() = incStep{step++} -> setAllToOne {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip;

UpdatePos(position, e) = incStep{step++} -> case {
	position == L:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CL:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	position == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define away_team_wins away_team_score > home_team_score && step == MAX_STEP;
#define home_team_wins away_team_score < home_team_score && step == MAX_STEP;
#define game_ends_in_draw away_team_score == home_team_score && step == MAX_STEP;

#assert StartGame deadlockfree;
#assert StartGame reaches away_team_wins with prob;
#assert StartGame reaches home_team_wins with prob;
#assert StartGame reaches game_ends_in_draw with prob;